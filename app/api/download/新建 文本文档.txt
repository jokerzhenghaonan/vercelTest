import { createFFmpeg, fetchFile } from '@ffmpeg/ffmpeg';
import { toBlobURL } from '@ffmpeg/util';
import ytdl from '@distube/ytdl-core';
import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
import { v4 as uuidv4 } from 'uuid';
import youtubeDl from 'youtube-dl-exec';

// R2 存储桶配置
const R2_BUCKET_NAME = process.env.R2_BUCKET_NAME;
const R2_ENDPOINT = process.env.R2_ENDPOINT;
const R2_ACCESS_KEY_ID = process.env.R2_ACCESS_KEY_ID;
const R2_SECRET_ACCESS_KEY = process.env.R2_SECRET_ACCESS_KEY;
const R2_PUBLIC_DOMAIN = process.env.R2_PUBLIC_DOMAIN;

const s3Client = new S3Client({
    endpoint: R2_ENDPOINT,
    credentials: {
        accessKeyId: R2_ACCESS_KEY_ID ?? '',
        secretAccessKey: R2_SECRET_ACCESS_KEY ?? '',
    },
    region: 'auto',
} as const);

const USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';
const cookies = [
    { name: "cookie1", value: [
        {
            "domain": ".youtube.com",
            "expirationDate": 1757922355.759801,
            "hostOnly": false,
            "httpOnly": true,
            "name": "__Secure-1PSIDTS",
            "path": "/",
            "sameSite": "unspecified",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "sidts-CjEBQlrA-IxXRPfx8oYAzbNBucnhTYt9TA3vmJ2TzILzFILXtCxpMd8o-l99jYbsKL5xEAA",
            "id": 1
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1760535962.79927,
            "hostOnly": false,
            "httpOnly": false,
            "name": "__Secure-3PAPISID",
            "path": "/",
            "sameSite": "no_restriction",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "nxX4aSyTGEIxx8HK/An5-xX7VL_HcQxvNm",
            "id": 2
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1760535962.799315,
            "hostOnly": false,
            "httpOnly": true,
            "name": "__Secure-3PSID",
            "path": "/",
            "sameSite": "no_restriction",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "g.a000nwhWwpYJbjKww4aR14Ghe8Qi-0njqkSjnbgXl9yDfLBZKyWY8Gwq6b-fEuOR86vOIdFSkQACgYKAeQSARASFQHGX2Mi9NW5eEwGI5j_aRdW5SSHwhoVAUF8yKq9_lNbbr4aMGj1eNJoNyLG0076",
            "id": 3
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1757922475.790962,
            "hostOnly": false,
            "httpOnly": true,
            "name": "__Secure-3PSIDCC",
            "path": "/",
            "sameSite": "no_restriction",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "AKEyXzWVMMlUS_qygv9FnkHublX5qWWOZAlEXDWaz_LLhdv8AvrIx9UdKKPlPVeGhxLIxxW00C0",
            "id": 4
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1757922355.759864,
            "hostOnly": false,
            "httpOnly": true,
            "name": "__Secure-3PSIDTS",
            "path": "/",
            "sameSite": "no_restriction",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "sidts-CjEBQlrA-IxXRPfx8oYAzbNBucnhTYt9TA3vmJ2TzILzFILXtCxpMd8o-l99jYbsKL5xEAA",
            "id": 5
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1759418329.780583,
            "hostOnly": false,
            "httpOnly": false,
            "name": "_ga",
            "path": "/",
            "sameSite": "unspecified",
            "secure": false,
            "session": false,
            "storeId": "0",
            "value": "GA1.1.1095825434.1724858330",
            "id": 6
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1759421448.370443,
            "hostOnly": false,
            "httpOnly": false,
            "name": "_ga_VCGEPY40VB",
            "path": "/",
            "sameSite": "unspecified",
            "secure": false,
            "session": false,
            "storeId": "0",
            "value": "GS1.1.1724861448.2.0.1724861448.60.0.0",
            "id": 7
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1732634327,
            "hostOnly": false,
            "httpOnly": false,
            "name": "_gcl_au",
            "path": "/",
            "sameSite": "unspecified",
            "secure": false,
            "session": false,
            "storeId": "0",
            "value": "1.1.173646635.1724858328",
            "id": 8
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1760535963.047436,
            "hostOnly": false,
            "httpOnly": true,
            "name": "LOGIN_INFO",
            "path": "/",
            "sameSite": "no_restriction",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "AFmmF2swRQIgXG0yqM5OXSPXyovapo3bu2lKxMrbLTknyvniFJ36ZmgCIQCk64KV4f94GaUMJo8bv9MIZcL7zkusnV8u88evNOa0rQ:QUQ3MjNmdzBpS2xwZkU1bDFUNnhjZVpaSHU4RmVYUFZfNWVfblJuQ3N6Ukc4djZ2NFJLdk0zSzh5RkpwQXk0c25aaDl0VDJJYktvQjFhaG11SnFhTTBxZF9PTjBuUFplQk5WRDhiNmVHMEl0Rkw3RlQ1cVBmT29UQ2VuUDFUcjZIdmswQ29SWERmRTZsR2JOd2x6Mm12VElYMFdqZ0E2eXlR",
            "id": 9
        },
        {
            "domain": ".youtube.com",
            "expirationDate": 1760944057.852,
            "hostOnly": false,
            "httpOnly": false,
            "name": "PREF",
            "path": "/",
            "sameSite": "unspecified",
            "secure": true,
            "session": false,
            "storeId": "0",
            "value": "f7=4100&tz=Asia.Shanghai&f4=10000",
            "id": 10
        }
        ] },
];
const agent = ytdl.createProxyAgent({ uri: "http://127.0.0.1:7890" }, cookies);


function generateRandomFileName() {
    const randomHexString = uuidv4();
    return `audio_${randomHexString}.mp3`;
}

let ffmpeg: any;

async function loadFFmpeg() {
    if (!ffmpeg) {
        ffmpeg = createFFmpeg({ log: true });
        await ffmpeg.load();
    }
    return ffmpeg;
}

async function convertAudio(inputBuffer: Buffer): Promise<Buffer> {
    console.log('处理音频流:');

    const ffmpeg = await loadFFmpeg();
    if (inputBuffer === null) {
        console.log('音频流为空:');

    } else {
        console.log('音频流不为空:');

    }
    ffmpeg.FS('writeFile', 'input.webm', inputBuffer);
    await ffmpeg.run('-i', 'input.webm', '-acodec', 'libmp3lame', '-b:a', '128k', 'output.mp3');
    const data = ffmpeg.FS('readFile', 'output.mp3');
    ffmpeg.FS('unlink', 'input.webm');
    ffmpeg.FS('unlink', 'output.mp3');

    return Buffer.from(data);
}

async function tryProcessAudio(url: string, retries = 3): Promise<{ fileName: string; cdnUrl: string }> {
    console.log(`开始处理 YouTube 音频, URL: ${url}, 剩余重试次数: ${retries}`);

    try {
        const videoInfo = await ytdl.getInfo(url, { agent });  
        console.log('获取到视频信息', videoInfo);  
        
        const audioFormat = ytdl.chooseFormat(videoInfo.formats, {  
            quality: 'highestaudio',  
            requestOptions: {  
                agent,  
            }  
        });  
        
        if (!audioFormat || !audioFormat.url) {  
            throw new Error('无法获取音频 URL');  
        }  
        
        console.log('获取到音频 URL:', audioFormat.url);  

        const randomFileName = generateRandomFileName();
        console.log('生成的随机文  名:', randomFileName);
        const outputFile = 'output.mp3';
        const audioStream = await ytdl(url, {
            agent,
             // Here
        });
        

        const chunks: Buffer[] = [];
        for await (const chunk of audioStream) {
            chunks.push(chunk);
        }
        const inputBuffer = Buffer.concat(chunks);

        console.log('开始音频转换');
        const outputBuffer = await convertAudio(inputBuffer);
        console.log('音频转换完成');
        const mp4 = `./${randomFileName}`;


        // const cookies = [
        //     { name: "cookie1", value: "VISITOR_INFO1_LIVE=0pe-p5sxcpY; VISITOR_PRIVACY_METADATA=CgJISxIEGgAgTg%3D%3D; PREF=tz=Asia.Shanghai; HSID=Atl9KAWxYl7wA7Aam; SSID=AiUN8TV2mYCQ8rzu3; APISID=l9alYz2hxTSTRmcp/AqotPA1xgkcwvQzo_; SAPISID=jpcqrkccmG30stEH/AjZhZ0aaNnsYbsvAj; __Secure-1PAPISID=jpcqrkccmG30stEH/AjZhZ0aaNnsYbsvAj; __Secure-3PAPISID=jpcqrkccmG30stEH/AjZhZ0aaNnsYbsvAj; SID=g.a000nwgwh_yYARnkAw1vV3LQStTvdd_ltbsdTxG8tx33ko_nnsHvxPoXvlZabA8yAvsoUl1jegACgYKAZYSARYSFQHGX2MiyILNUhHVaVQNWyOjhyVudRoVAUF8yKoQzueBl21kuVhKSDQv2_yF0076; __Secure-1PSID=g.a000nwgwh_yYARnkAw1vV3LQStTvdd_ltbsdTxG8tx33ko_nnsHvpq8iPHcggDfWYeYvfW-hlAACgYKAbISARYSFQHGX2MiKoN3CCXZVs0Iz3zl_Bf-LhoVAUF8yKrI7biaVf07hPrXrqyuoiwG0076; LOGIN_INFO=AFmmF2swRAIgSa3GkeXyWc4lyKDLm7Lnoa76G-KJA06UI7Ihwwhr9W0CIAnK9hSO_Fpbt59FNAjsH6OREa9JH8n7dKICkcfuH4lz:QUQ3MjNmeUdUbjd1SGloM055TVdESDROalBua3FST3BBSXlvdDM3bTZlODQ0R0t2bS1pVHROeWJjb0NVMGFsZ05yRFNzek1sZ2lsRmNTb3REWVZCUlJvelJPMWt4Q0FRei12Tmxfa0NURHRWUmVOOElSRzNhVWdmRFBqTFVPN1FsV1I3MEhjLVJYcW5ZWC1fRGNfczZmLWFaQnNnN0Q4cjdn; __Secure-3PSID=g.a000nwgwh_yYARnkAw1vV3LQStTvdd_ltbsdTxG8tx33ko_nnsHvcugSYFyjpdmKGL60hxa8EQACgYKAYYSARYSFQHGX2MilOdKHeXoHzEK86bJ9_o_WRoVAUF8yKpjyWFodRI6bJeL-3JRfEXp0076; YSC=ojKHHUZq1ko; __Secure-1PSIDTS=sidts-CjIBUFGoh8sSTTDvAfDaRt2r0br1SbTyXG8iGR4jELwzRmfo6N60XSo2Hx_Nl9sUlo8-AxAA; __Secure-3PSIDTS=sidts-CjIBUFGoh8sSTTDvAfDaRt2r0br1SbTyXG8iGR4jELwzRmfo6N60XSo2Hx_Nl9sUlo8-AxAA; ST-3opvp5=session_logininfo=AFmmF2swRAIgSa3GkeXyWc4lyKDLm7Lnoa76G-KJA06UI7Ihwwhr9W0CIAnK9hSO_Fpbt59FNAjsH6OREa9JH8n7dKICkcfuH4lz%3AQUQ3MjNmeUdUbjd1SGloM055TVdESDROalBua3FST3BBSXlvdDM3bTZlODQ0R0t2bS1pVHROeWJjb0NVMGFsZ05yRFNzek1sZ2lsRmNTb3REWVZCUlJvelJPMWt4Q0FRei12Tmxfa0NURHRWUmVOOElSRzNhVWdmRFBqTFVPN1FsV1I3MEhjLVJYcW5ZWC1fRGNfczZmLWFaQnNnN0Q4cjdn; SIDCC=AKEyXzU5IcdtjyvllsACErAEo1ivhhX3u3fl3tsXds_48Z0nD0qFVrFMbDTeC2nq01-CoFEp3gg; __Secure-1PSIDCC=AKEyXzXzHsJJjWRccac1p2qlZmsLihwWYTOQvh_u-_E1uh0bid1BzQop_eVgm2OxDROL3sOfRQ; __Secure-3PSIDCC=AKEyXzVaMZ-GAdyqqPbs7d-RzBzBfbVv0H7SB9AlD9HXCjWdhP7DEp3m6Qmm3FY3SghPJf0zCw" },
        //   ];
        //   const agent = ytdl.createProxyAgent({ uri: "http://127.0.0.1:7890" }, cookies);
        //   const videoInfo =  await ytdl.getInfo(url, { agent });
        //   const audioFormat = ytdl.chooseFormat(videoInfo.formats, { quality: 'highestaudio', requestOptions: {
        //     agent,
        //   }});
        //   if (!audioFormat || !audioFormat.url) {
        //       throw new Error('无法获取音频 URL');
        //   }
        //   console.log('获取到音频 URL:', audioFormat.url);

        //   const randomFileName = generateRandomFileName();
        //   console.log('生成的随机文  名:', randomFileName);
        //   const mp4 = `./${randomFileName}`;
        //   ytdl(url, {
        //       agent,
        //       filter: "audioonly", // Here
        //   }).pipe(fs.createWriteStream(mp4)).on("finish", async ()=> {
        //     console.log('success')
        //   }).on('error', (err) => {
        //     console.error('下载时出错:', err);
        //   });


        // const uploadParams = {
        //     Bucket: R2_BUCKET_NAME,
        //     Key: randomFileName,
        //     Body: outputBuffer,
        //     ContentType: 'audio/mpeg',
        //     ContentDisposition: `attachment; filename="${randomFileName}"`,
        // };

        // console.log('开始上传到 R2');
        // await s3Client.send(new PutObjectCommand(uploadParams));
        // console.log('上传到 R2 成功');

        // if (!R2_PUBLIC_DOMAIN) {
        //     throw new Error('R2_PUBLIC_DOMAIN 环境变量未设置');
        // }

        const cdnUrl = `https://${R2_PUBLIC_DOMAIN}/${randomFileName}`;
        console.log('生成的 CDN URL:', cdnUrl);

        return { fileName: randomFileName, cdnUrl };
    } catch (error) {
        console.error('处理 YouTube 音频时出错:', error);
        if (retries > 0) {
            console.log(`处理失败，将在 5 秒后重试，剩余重试次数: ${retries - 1}`);
            await new Promise(resolve => setTimeout(resolve, 5000));
            return tryProcessAudio(url, retries - 1);
        }
        throw error;
    }
}

async function getAudioUrl(url: string): Promise<string> {
    const output = await youtubeDl(url, {
        dumpSingleJson: true,
        noCheckCertificates: true,
        noWarnings: true,
        preferFreeFormats: true,
        addHeader: ['referer:youtube.com', 'user-agent:googlebot'],
    });

    const audioFormat = output.formats.find((format: any) => format.acodec !== 'none' && !format.vcodec);
    if (!audioFormat) {
        throw new Error('No audio format found');
    }

    return audioFormat.url;
}

export async function processYoutubeAudio(url: string): Promise<{ fileName: string; cdnUrl: string }> {
    try {
        return await tryProcessAudio(url);
    } catch (error) {
        console.error('processYoutubeAudio 最终错误:', error);
        throw error;
    }
}